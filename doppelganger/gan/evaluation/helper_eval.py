import pandas as pd
import numpy as np


def get_numerical_columns_df(df, num_cols, return_id=False):
    """
    takes in dataframe with various columns and returns dataframe with only numerical columns

    Args:
    df: dataframe converted from npy arrays generated by doppelganger
    num_cols: list of names of the numerical columns

    Returns:
    df_num: dataframe with only numerical columns
    """

    if return_id:
        num_cols = ['id'] + num_cols

    df_num = df[num_cols].copy()
    return df_num


def get_categorical_columns_df(df, cat_cols, return_id=False):
    """
    takes in dataframe with various columns and returns dataframe with only categorical columns

    Args:
    df: dataframe converted from npy arrays generated by doppelganger
    cat_cols: list of names of the categorical columns

    Returns:
    df_num: dataframe with only categorical columns
    """

    if return_id:
        cat_cols = ['id'] + cat_cols
    df_cat = df[cat_cols].copy()
    return df_cat

def Stack2DSequence(df, time_seq_len=130):
    '''
    Transform a df in 2D shape into 3D by putting the data for the sampe patient ('id') in each layer, the 
    resulting shape is (no. of sample, max(time_sequence),dimension of column). If the time sequence length
    of this patient is less than the max(time_sequence), then post-pad remaining rows as zero.
    Args:
    df: dataframe with 'id' column as the first column
    time_seq_len = maximum time series length

    Returns:
    stacked_array: df reshaped into array of shape (num sample, time_seq_len, dim_columns)
    '''
    stacked_array = []
    id_unique = df.id.unique()

    for i in id_unique:
        child = np.array(df.loc[df['id'] == i].iloc[:, 1:])
        child = np.pad(child, ((0, time_seq_len-len(child)), (0,0)))
        stacked_array.append(child)
    stacked_array = np.stack(stacked_array)
    return stacked_array


def color_threshold_yellow(val):
        """
        Highlight all r values > 0.5 as yellow, indicating strong correlation
        """
        threshold = 0.5
        if ((val != None) and (abs(val) > threshold)):
            color = 'yellow' 
        else:
            color = 'black'
        return 'color: %s' % color